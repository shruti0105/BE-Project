package com.project.npci.controller;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import javax.crypto.Cipher;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import java.util.Base64;

@RestController
public class NpciController {

    // Replace this example private key with your own properly formatted private key
    static final String EXAMPLE_PRIVATE_KEY = "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7WEi4PZQoE6LvlPgVPKPmUL1CRJqpW6Q8nV8kAPr1jTFcHa7L4nt7aTFCxT7O+Xj2PCNymG8x7bV43j9Qcrewbd/i3rJZNGwFnCBiane3oFI6V6YkuwhjMpCrKtW97rKPe4xO/TC+KCzLS1rSUUDNZRJQR5hotw/7d2TNNLFBEzvZbQPTaG9HqsWyKM1eudu1hHrlKU3vpfc7cWKWELvS0j2vRfUgC2/e7TnCEz9W1eOen3Fvxk7+3bpWLOnevd+T0fdonFB3p/IoS3bR01srr8v6IZeKabalQotVKyGho4OffrRJYKE1sJ9A3I5L/0SZlDfvWhbE01o3zSgmONn7AgMBAAECggEAAW3Hxt6dXH2N2WhC83KDc38RJR9ofeXXh6jRmsYxI8ygYD9PtSQJ5Lk61B4J/8JyVDpwMMW4hLfMka/sPrJT8/yv35yVh/hON0VnZSjCYfxPND0Kj4QnqQ4FLBuxsUxP61KPZuN9IC4ml/mqpyj8fAngd7acEyG2Sv4wSXUJ7GD0U34yqIgmXCGVhyaukoDM/THMFqsr7DhKUfQqxAkCPkfWokXUE+jAK73/Fpp+2ruVP39HSwkw/soLTSKmw1R73p+G8C1KJDPufs9k7cuEBBk8nlcZlATs/HmAobadfUiIhMPh9PgbHnhdtf34tFRtSxEpHTKuGBqXAPKFpHpV0QKBgQDqv15f2jfhh1bv/80I33bFAdKBEayfbEfLiju/jYVb6rdHpx/uYhqmGPXpaQrU/uvPyh+JrwOGMxnok3TWbIwctIO6nsOuMjYXZPuHea3zRmIUbFuELMCO6JSQgLlA50V6XdcAiTRpoIUAuBzG6IVH3H0UA0CAvrwUs5ifF4UPCwKBgQDMTklKvO/nqf3LP1qg+imnpg+6lyx67MQSeIkt0Dxbk2Jz4i6Nv3rG9cSyHwd/e0lEBLcoCkPruAayV0XUHfyQXmB5NJo9+ZsnS0PGyTGJ5YP7NMzcas3xf3silVJGh/4FLU3fiCSo/VHEw3hQ1mQ+CyJ8bfSPZBC6nR4f5En20QKBgFl53+sBLlOUVprcEbbUFl05OJdhuT5681KtueBlfPNwH7P8C7u9QRMWaIUzOKG/GPr2u9arEtjQGYwAyIQCk9VNKPi1EzkOgnegUg9tXdRge3n1Y1yaAjt2g0ohBnuqq1zc79qQcZ3hRVDk3HMkpciiTjqWkrt/+Aib/AyH1nvJAoGAUNDW5R1/uJ/hqLhS3UKXn51ss16BVc66cKQFf33TolXWqAhcae3IX1NwjxT/HkpiXOmQmeIVo/STkZA8KwABnAn5F3jbWpCV8yEumj+TvPxxDLmCH96PwGuxBakTdprsvJeDKlzsQ3yRD8hSm4dy96fn6FiGWQI4K9lixTLEn0ECgYEAgJfxNxxoiXJlu4AQCbRaMRxBExopsJxuo/flsSOwCVZWQeHKQHZaz0V8I22VSzipjOrq7wNgKiUyDNrtrymE5cIWmiE24L4EwDTw5lzrCf/3VyPOEN6HWiFBx2uqKQoyKI6wXQUVEwN5zN2jvM3ejq/x6Kwub+/ZXyiZ2L0dQyw=\r\n"
    		;
    @PostMapping("/process-transaction")
    public ResponseEntity<String> processTransaction(@RequestBody String encryptedData) {
        try {
            PrivateKey privateKey = getPrivateKeyFromString(EXAMPLE_PRIVATE_KEY);

            String decryptedData = decryptData(encryptedData.getBytes(), privateKey);
            System.out.println("Decrypted Data: " + decryptedData);

            return ResponseEntity.ok("Transaction processed successfully");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("Failed to process transaction");
        }
    }

    public static PrivateKey getPrivateKeyFromString(String key) throws Exception {
//        String privateKeyPEM = key.replace("-----BEGIN PRIVATE KEY-----\n", "")
//                .replace("-----END PRIVATE KEY-----", "")
//                .replace("\n", "");

        byte[] privateKeyBytes = Base64.getDecoder().decode(key);

        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(privateKeyBytes));
    }

    public static String decryptData(byte[] encryptedData, Key key) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decryptedBytes = cipher.doFinal(encryptedData);
        return new String(decryptedBytes);
    }
}
